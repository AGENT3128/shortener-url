version: '3'

vars:
  BINARY_NAME: shortener
  BUILD_DIR: build
  MAIN_FILE: cmd/shortener/main.go
  GO_FILES:
    sh: find . -type f -name '*.go'
  DATABASE_DSN: 'postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable'
  SERVER_PORT: 8081
  BASE_URL: "http://localhost:{{.SERVER_PORT}}"

tasks:
  clean:
    desc: Clean build directory
    cmds:
      - rm -rf {{.BUILD_DIR}}

  dependencies:
    desc: Install dependencies
    deps: [generate]
    cmds:
      - go mod tidy
      - go mod download
      - go mod verify

  generate:
    desc: Generate code
    cmds:
      - |
        export PATH=$PATH:$(go env GOPATH)/bin  
        rm -rf internal/repository/postgres/generated/
        go generate ./...

  build:
    desc: Build the shortener binary
    deps: [clean]
    vars:
      VERSION:
        sh: echo "${VERSION:-$(git describe --tags --abbrev=0 2>/dev/null || echo "N/A")}"
      COMMIT:
        sh: echo "${COMMIT:-$(git rev-parse HEAD)}"
      DATE:
        sh: echo "${DATE:-$(date +'%Y-%m-%d %H:%M:%S')}"
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        export PATH=$PATH:$(go env GOPATH)/bin
        go build -ldflags "-X 'main.buildVersion={{.VERSION}}' -X 'main.buildCommit={{.COMMIT}}' -X 'main.buildDate={{.DATE}}'" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_FILE}}
    sources:
      - '**/*.go'
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  lint:
    desc: Run linters
    cmds:
      - |
        export PATH=$PATH:$(go env GOPATH)/bin
        golangci-lint run ./... --fix

  test:
    desc: Run tests
    deps: [generate]
    cmds:
      - go test ./... -coverprofile=coverage.out 
      - go tool cover -func=coverage.out
      - go tool cover -html=coverage.out -o coverage.html

  # base task for tests, from which the rest will inherit
  _test_increment:
    internal: true
    deps: [build]
    cmds:
      - |
        shortenertestbeta -test.v -test.run=^TestIteration{{.ITERATION}}$ {{.TEST_ARGS}}

  test_increment_1:
    desc: Test increment 1
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 1
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}}"

  test_increment_2:
    desc: Test increment 2
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 2
          TEST_ARGS: "-source-path=."

  test_increment_3:
    desc: Test increment 3
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 3
          TEST_ARGS: "-source-path=."

  test_increment_4:
    desc: Test increment 4
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 4
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -server-port={{ .SERVER_PORT }} -source-path=."

  test_increment_5:
    desc: Test increment 5
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 5
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -server-port={{ .SERVER_PORT }}"

  test_increment_6:
    desc: Test increment 6
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 6
          TEST_ARGS: "-source-path=."

  test_increment_7:
    desc: Test increment 7
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 7
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -source-path=."

  test_increment_8:
    desc: Test increment 8
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 8
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}}"

  test_increment_9:
    desc: Test increment 9
    vars:
      TEMP_FILE: test.json
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 9
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -source-path=. -file-storage-path={{.TEMP_FILE}}"
      - rm -f {{.TEMP_FILE}}

  test_increment_10:
    desc: Test increment 10
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 10
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -source-path=. -database-dsn={{.DATABASE_DSN}}"

  test_increment_11:
    desc: Test increment 11
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 11
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -database-dsn={{.DATABASE_DSN}}"

  test_increment_12:
    desc: Test increment 12
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 12
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -database-dsn={{.DATABASE_DSN}}"

  test_increment_13:
    desc: Test increment 13
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 13
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -database-dsn={{.DATABASE_DSN}}"

  test_increment_14:
    desc: Test increment 14
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 14
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -database-dsn={{.DATABASE_DSN}}"

  test_increment_15:
    desc: Test increment 15
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 15
          TEST_ARGS: "-binary-path={{.BUILD_DIR}}/{{.BINARY_NAME}} -database-dsn={{.DATABASE_DSN}}"

  test_increment_16:
    desc: Test increment 16
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 16
          TEST_ARGS: "-source-path=."

  test_increment_17:
    desc: Test increment 17
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 17
          TEST_ARGS: "-source-path=."

  test_increment_18:
    desc: Test increment 18
    cmds:
      - task: _test_increment
        vars:
          ITERATION: 18
          TEST_ARGS: "-source-path=."

  test_increment_all:
    desc: Run all tests
    vars:
      ITERATIONS:
        sh: seq 1 18
    cmds:
      - for: { var: ITERATIONS }
        task: test_increment_{{.ITEM}}
      - echo "All tests passed"

  run:
    desc: Run the shortener binary
    cmds:
      - go run {{.MAIN_FILE}} -d {{.DATABASE_DSN}} -http-server-write-timeout=20s -enable-https=true 

  k6_upload_url:
    desc: Run a k6 script to upload urls
    cmds:
      - k6 run scripts/k6/upload_url.js

  profile_mem:
    desc: |
      Profile the shortener memory
      Example:
        1) start shortener with -http-server-write-timeout=20s
          `# task run`
        2) saving the profiling to the file base.pprof , we used old implementation of short reference generation - GenerateShortID 
          `# PROFILE_NAME=base task profile_mem`
        3) run a k6 script to upload urls
          `# task k6_upload_url`
        4) SIGTERM shortener
        5) optimize GenerateShortID -> GenerateShortIDOptimized
        6) start shortener with -http-server-write-timeout=20s
          `# task run`
        7) saving the profiling to the file result.pprof , we used new implementation of short reference generation - GenerateShortIDOptimized
          `# PROFILE_NAME=result task profile_mem`
        8) SIGTERM shortener
        9) compare the two files
          `# go tool pprof -top -diff_base=profiles/base.pprof profiles/result.pprof `

    vars:
      SERVER_PORT: 8080
      PROFILE_NAME:
        sh: echo ${PROFILE_NAME:-profile_mem}
    cmds:
      - |
        sh -c "go tool pprof -proto -output=profiles/{{.PROFILE_NAME}}.pprof http://localhost:{{.SERVER_PORT}}/debug/pprof/heap?seconds=15"

  staticlint:
    desc: Run static lint
    cmds:
      - |
        export PATH=$PATH:$(go env GOPATH)/bin
        mkdir -p {{.BUILD_DIR}}
        go build -o {{.BUILD_DIR}}/staticlint cmd/staticlint/main.go
        {{.BUILD_DIR}}/staticlint ./...
