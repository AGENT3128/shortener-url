// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./mocks/handlers_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/AGENT3128/shortener-url/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockURLSaver is a mock of URLSaver interface.
type MockURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockURLSaverMockRecorder
	isgomock struct{}
}

// MockURLSaverMockRecorder is the mock recorder for MockURLSaver.
type MockURLSaverMockRecorder struct {
	mock *MockURLSaver
}

// NewMockURLSaver creates a new mock instance.
func NewMockURLSaver(ctrl *gomock.Controller) *MockURLSaver {
	mock := &MockURLSaver{ctrl: ctrl}
	mock.recorder = &MockURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLSaver) EXPECT() *MockURLSaverMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockURLSaver) Add(ctx context.Context, userID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockURLSaverMockRecorder) Add(ctx, userID, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLSaver)(nil).Add), ctx, userID, originalURL)
}

// MockURLGetter is a mock of URLGetter interface.
type MockURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockURLGetterMockRecorder
	isgomock struct{}
}

// MockURLGetterMockRecorder is the mock recorder for MockURLGetter.
type MockURLGetterMockRecorder struct {
	mock *MockURLGetter
}

// NewMockURLGetter creates a new mock instance.
func NewMockURLGetter(ctrl *gomock.Controller) *MockURLGetter {
	mock := &MockURLGetter{ctrl: ctrl}
	mock.recorder = &MockURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLGetter) EXPECT() *MockURLGetterMockRecorder {
	return m.recorder
}

// GetByShortURL mocks base method.
func (m *MockURLGetter) GetByShortURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLGetterMockRecorder) GetByShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLGetter)(nil).GetByShortURL), ctx, shortURL)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
	isgomock struct{}
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), ctx)
}

// MockBatchURLSaver is a mock of BatchURLSaver interface.
type MockBatchURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockBatchURLSaverMockRecorder
	isgomock struct{}
}

// MockBatchURLSaverMockRecorder is the mock recorder for MockBatchURLSaver.
type MockBatchURLSaverMockRecorder struct {
	mock *MockBatchURLSaver
}

// NewMockBatchURLSaver creates a new mock instance.
func NewMockBatchURLSaver(ctrl *gomock.Controller) *MockBatchURLSaver {
	mock := &MockBatchURLSaver{ctrl: ctrl}
	mock.recorder = &MockBatchURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchURLSaver) EXPECT() *MockBatchURLSaverMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockBatchURLSaver) AddBatch(ctx context.Context, userID string, urls []entity.URL) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, userID, urls)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockBatchURLSaverMockRecorder) AddBatch(ctx, userID, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockBatchURLSaver)(nil).AddBatch), ctx, userID, urls)
}

// MockUserURLGetter is a mock of UserURLGetter interface.
type MockUserURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserURLGetterMockRecorder
	isgomock struct{}
}

// MockUserURLGetterMockRecorder is the mock recorder for MockUserURLGetter.
type MockUserURLGetterMockRecorder struct {
	mock *MockUserURLGetter
}

// NewMockUserURLGetter creates a new mock instance.
func NewMockUserURLGetter(ctrl *gomock.Controller) *MockUserURLGetter {
	mock := &MockUserURLGetter{ctrl: ctrl}
	mock.recorder = &MockUserURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserURLGetter) EXPECT() *MockUserURLGetterMockRecorder {
	return m.recorder
}

// GetUserURLs mocks base method.
func (m *MockUserURLGetter) GetUserURLs(ctx context.Context, userID string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockUserURLGetterMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockUserURLGetter)(nil).GetUserURLs), ctx, userID)
}

// MockUserURLDeleter is a mock of UserURLDeleter interface.
type MockUserURLDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockUserURLDeleterMockRecorder
	isgomock struct{}
}

// MockUserURLDeleterMockRecorder is the mock recorder for MockUserURLDeleter.
type MockUserURLDeleterMockRecorder struct {
	mock *MockUserURLDeleter
}

// NewMockUserURLDeleter creates a new mock instance.
func NewMockUserURLDeleter(ctrl *gomock.Controller) *MockUserURLDeleter {
	mock := &MockUserURLDeleter{ctrl: ctrl}
	mock.recorder = &MockUserURLDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserURLDeleter) EXPECT() *MockUserURLDeleterMockRecorder {
	return m.recorder
}

// DeleteUserURLs mocks base method.
func (m *MockUserURLDeleter) DeleteUserURLs(ctx context.Context, userID string, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLs", ctx, userID, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLs indicates an expected call of DeleteUserURLs.
func (mr *MockUserURLDeleterMockRecorder) DeleteUserURLs(ctx, userID, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLs", reflect.TypeOf((*MockUserURLDeleter)(nil).DeleteUserURLs), ctx, userID, shortURLs)
}

// MockStatsGetter is a mock of StatsGetter interface.
type MockStatsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsGetterMockRecorder
	isgomock struct{}
}

// MockStatsGetterMockRecorder is the mock recorder for MockStatsGetter.
type MockStatsGetterMockRecorder struct {
	mock *MockStatsGetter
}

// NewMockStatsGetter creates a new mock instance.
func NewMockStatsGetter(ctrl *gomock.Controller) *MockStatsGetter {
	mock := &MockStatsGetter{ctrl: ctrl}
	mock.recorder = &MockStatsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsGetter) EXPECT() *MockStatsGetterMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockStatsGetter) GetStats(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatsGetterMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsGetter)(nil).GetStats), ctx)
}
