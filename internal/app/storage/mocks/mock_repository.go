// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIHandler is a mock of IHandler interface.
type MockIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerMockRecorder
}

// MockIHandlerMockRecorder is the mock recorder for MockIHandler.
type MockIHandlerMockRecorder struct {
	mock *MockIHandler
}

// NewMockIHandler creates a new mock instance.
func NewMockIHandler(ctrl *gomock.Controller) *MockIHandler {
	mock := &MockIHandler{ctrl: ctrl}
	mock.recorder = &MockIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandler) EXPECT() *MockIHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockIHandler) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockIHandlerMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockIHandler)(nil).Handler))
}

// Method mocks base method.
func (m *MockIHandler) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockIHandlerMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockIHandler)(nil).Method))
}

// Pattern mocks base method.
func (m *MockIHandler) Pattern() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pattern")
	ret0, _ := ret[0].(string)
	return ret0
}

// Pattern indicates an expected call of Pattern.
func (mr *MockIHandlerMockRecorder) Pattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pattern", reflect.TypeOf((*MockIHandler)(nil).Pattern))
}

// MockIPattern is a mock of IPattern interface.
type MockIPattern struct {
	ctrl     *gomock.Controller
	recorder *MockIPatternMockRecorder
}

// MockIPatternMockRecorder is the mock recorder for MockIPattern.
type MockIPatternMockRecorder struct {
	mock *MockIPattern
}

// NewMockIPattern creates a new mock instance.
func NewMockIPattern(ctrl *gomock.Controller) *MockIPattern {
	mock := &MockIPattern{ctrl: ctrl}
	mock.recorder = &MockIPatternMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPattern) EXPECT() *MockIPatternMockRecorder {
	return m.recorder
}

// Pattern mocks base method.
func (m *MockIPattern) Pattern() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pattern")
	ret0, _ := ret[0].(string)
	return ret0
}

// Pattern indicates an expected call of Pattern.
func (mr *MockIPatternMockRecorder) Pattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pattern", reflect.TypeOf((*MockIPattern)(nil).Pattern))
}

// MockIMethod is a mock of IMethod interface.
type MockIMethod struct {
	ctrl     *gomock.Controller
	recorder *MockIMethodMockRecorder
}

// MockIMethodMockRecorder is the mock recorder for MockIMethod.
type MockIMethodMockRecorder struct {
	mock *MockIMethod
}

// NewMockIMethod creates a new mock instance.
func NewMockIMethod(ctrl *gomock.Controller) *MockIMethod {
	mock := &MockIMethod{ctrl: ctrl}
	mock.recorder = &MockIMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMethod) EXPECT() *MockIMethodMockRecorder {
	return m.recorder
}

// Method mocks base method.
func (m *MockIMethod) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockIMethodMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockIMethod)(nil).Method))
}

// MockIHandlerFunc is a mock of IHandlerFunc interface.
type MockIHandlerFunc struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerFuncMockRecorder
}

// MockIHandlerFuncMockRecorder is the mock recorder for MockIHandlerFunc.
type MockIHandlerFuncMockRecorder struct {
	mock *MockIHandlerFunc
}

// NewMockIHandlerFunc creates a new mock instance.
func NewMockIHandlerFunc(ctrl *gomock.Controller) *MockIHandlerFunc {
	mock := &MockIHandlerFunc{ctrl: ctrl}
	mock.recorder = &MockIHandlerFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandlerFunc) EXPECT() *MockIHandlerFuncMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockIHandlerFunc) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockIHandlerFuncMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockIHandlerFunc)(nil).Handler))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepository) Add(shortID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", shortID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryMockRecorder) Add(shortID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), shortID, originalURL)
}

// GetByOriginalURL mocks base method.
func (m *MockRepository) GetByOriginalURL(originalURL string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockRepositoryMockRecorder) GetByOriginalURL(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockRepository)(nil).GetByOriginalURL), originalURL)
}

// GetByShortID mocks base method.
func (m *MockRepository) GetByShortID(shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortID", shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByShortID indicates an expected call of GetByShortID.
func (mr *MockRepositoryMockRecorder) GetByShortID(shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortID", reflect.TypeOf((*MockRepository)(nil).GetByShortID), shortID)
}

// MockShortenerSet is a mock of ShortenerSet interface.
type MockShortenerSet struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerSetMockRecorder
}

// MockShortenerSetMockRecorder is the mock recorder for MockShortenerSet.
type MockShortenerSetMockRecorder struct {
	mock *MockShortenerSet
}

// NewMockShortenerSet creates a new mock instance.
func NewMockShortenerSet(ctrl *gomock.Controller) *MockShortenerSet {
	mock := &MockShortenerSet{ctrl: ctrl}
	mock.recorder = &MockShortenerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerSet) EXPECT() *MockShortenerSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockShortenerSet) Add(shortID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", shortID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockShortenerSetMockRecorder) Add(shortID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShortenerSet)(nil).Add), shortID, originalURL)
}

// MockShortenerGet is a mock of ShortenerGet interface.
type MockShortenerGet struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerGetMockRecorder
}

// MockShortenerGetMockRecorder is the mock recorder for MockShortenerGet.
type MockShortenerGetMockRecorder struct {
	mock *MockShortenerGet
}

// NewMockShortenerGet creates a new mock instance.
func NewMockShortenerGet(ctrl *gomock.Controller) *MockShortenerGet {
	mock := &MockShortenerGet{ctrl: ctrl}
	mock.recorder = &MockShortenerGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerGet) EXPECT() *MockShortenerGetMockRecorder {
	return m.recorder
}

// GetByOriginalURL mocks base method.
func (m *MockShortenerGet) GetByOriginalURL(originalURL string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockShortenerGetMockRecorder) GetByOriginalURL(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockShortenerGet)(nil).GetByOriginalURL), originalURL)
}

// GetByShortID mocks base method.
func (m *MockShortenerGet) GetByShortID(shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortID", shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByShortID indicates an expected call of GetByShortID.
func (mr *MockShortenerGetMockRecorder) GetByShortID(shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortID", reflect.TypeOf((*MockShortenerGet)(nil).GetByShortID), shortID)
}
