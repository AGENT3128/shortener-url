// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/AGENT3128/shortener-url/internal/app/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIHandler is a mock of IHandler interface.
type MockIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerMockRecorder
}

// MockIHandlerMockRecorder is the mock recorder for MockIHandler.
type MockIHandlerMockRecorder struct {
	mock *MockIHandler
}

// NewMockIHandler creates a new mock instance.
func NewMockIHandler(ctrl *gomock.Controller) *MockIHandler {
	mock := &MockIHandler{ctrl: ctrl}
	mock.recorder = &MockIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandler) EXPECT() *MockIHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockIHandler) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockIHandlerMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockIHandler)(nil).Handler))
}

// Method mocks base method.
func (m *MockIHandler) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockIHandlerMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockIHandler)(nil).Method))
}

// Pattern mocks base method.
func (m *MockIHandler) Pattern() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pattern")
	ret0, _ := ret[0].(string)
	return ret0
}

// Pattern indicates an expected call of Pattern.
func (mr *MockIHandlerMockRecorder) Pattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pattern", reflect.TypeOf((*MockIHandler)(nil).Pattern))
}

// MockIPattern is a mock of IPattern interface.
type MockIPattern struct {
	ctrl     *gomock.Controller
	recorder *MockIPatternMockRecorder
}

// MockIPatternMockRecorder is the mock recorder for MockIPattern.
type MockIPatternMockRecorder struct {
	mock *MockIPattern
}

// NewMockIPattern creates a new mock instance.
func NewMockIPattern(ctrl *gomock.Controller) *MockIPattern {
	mock := &MockIPattern{ctrl: ctrl}
	mock.recorder = &MockIPatternMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPattern) EXPECT() *MockIPatternMockRecorder {
	return m.recorder
}

// Pattern mocks base method.
func (m *MockIPattern) Pattern() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pattern")
	ret0, _ := ret[0].(string)
	return ret0
}

// Pattern indicates an expected call of Pattern.
func (mr *MockIPatternMockRecorder) Pattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pattern", reflect.TypeOf((*MockIPattern)(nil).Pattern))
}

// MockIMethod is a mock of IMethod interface.
type MockIMethod struct {
	ctrl     *gomock.Controller
	recorder *MockIMethodMockRecorder
}

// MockIMethodMockRecorder is the mock recorder for MockIMethod.
type MockIMethodMockRecorder struct {
	mock *MockIMethod
}

// NewMockIMethod creates a new mock instance.
func NewMockIMethod(ctrl *gomock.Controller) *MockIMethod {
	mock := &MockIMethod{ctrl: ctrl}
	mock.recorder = &MockIMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMethod) EXPECT() *MockIMethodMockRecorder {
	return m.recorder
}

// Method mocks base method.
func (m *MockIMethod) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockIMethodMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockIMethod)(nil).Method))
}

// MockIHandlerFunc is a mock of IHandlerFunc interface.
type MockIHandlerFunc struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerFuncMockRecorder
}

// MockIHandlerFuncMockRecorder is the mock recorder for MockIHandlerFunc.
type MockIHandlerFuncMockRecorder struct {
	mock *MockIHandlerFunc
}

// NewMockIHandlerFunc creates a new mock instance.
func NewMockIHandlerFunc(ctrl *gomock.Controller) *MockIHandlerFunc {
	mock := &MockIHandlerFunc{ctrl: ctrl}
	mock.recorder = &MockIHandlerFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandlerFunc) EXPECT() *MockIHandlerFuncMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockIHandlerFunc) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockIHandlerFuncMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockIHandlerFunc)(nil).Handler))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepository) Add(ctx context.Context, userID, shortID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, shortID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryMockRecorder) Add(ctx, userID, shortID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), ctx, userID, shortID, originalURL)
}

// AddBatch mocks base method.
func (m *MockRepository) AddBatch(ctx context.Context, userID string, urls []models.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockRepositoryMockRecorder) AddBatch(ctx, userID, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockRepository)(nil).AddBatch), ctx, userID, urls)
}

// GetByOriginalURL mocks base method.
func (m *MockRepository) GetByOriginalURL(ctx context.Context, originalURL string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockRepositoryMockRecorder) GetByOriginalURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockRepository)(nil).GetByOriginalURL), ctx, originalURL)
}

// GetByShortID mocks base method.
func (m *MockRepository) GetByShortID(ctx context.Context, shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortID", ctx, shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByShortID indicates an expected call of GetByShortID.
func (mr *MockRepositoryMockRecorder) GetByShortID(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortID", reflect.TypeOf((*MockRepository)(nil).GetByShortID), ctx, shortID)
}

// GetUserURLs mocks base method.
func (m *MockRepository) GetUserURLs(ctx context.Context, userID string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockRepositoryMockRecorder) GetUserURLs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockRepository)(nil).GetUserURLs), ctx, userID)
}

// IsURLDeleted mocks base method.
func (m *MockRepository) IsURLDeleted(ctx context.Context, shortID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsURLDeleted", ctx, shortID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsURLDeleted indicates an expected call of IsURLDeleted.
func (mr *MockRepositoryMockRecorder) IsURLDeleted(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsURLDeleted", reflect.TypeOf((*MockRepository)(nil).IsURLDeleted), ctx, shortID)
}

// MarkDeletedBatch mocks base method.
func (m *MockRepository) MarkDeletedBatch(ctx context.Context, userID string, shortIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedBatch", ctx, userID, shortIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedBatch indicates an expected call of MarkDeletedBatch.
func (mr *MockRepositoryMockRecorder) MarkDeletedBatch(ctx, userID, shortIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedBatch", reflect.TypeOf((*MockRepository)(nil).MarkDeletedBatch), ctx, userID, shortIDs)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// MockShortenerSet is a mock of ShortenerSet interface.
type MockShortenerSet struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerSetMockRecorder
}

// MockShortenerSetMockRecorder is the mock recorder for MockShortenerSet.
type MockShortenerSetMockRecorder struct {
	mock *MockShortenerSet
}

// NewMockShortenerSet creates a new mock instance.
func NewMockShortenerSet(ctrl *gomock.Controller) *MockShortenerSet {
	mock := &MockShortenerSet{ctrl: ctrl}
	mock.recorder = &MockShortenerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerSet) EXPECT() *MockShortenerSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockShortenerSet) Add(ctx context.Context, userID, shortID, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, shortID, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockShortenerSetMockRecorder) Add(ctx, userID, shortID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShortenerSet)(nil).Add), ctx, userID, shortID, originalURL)
}

// AddBatch mocks base method.
func (m *MockShortenerSet) AddBatch(ctx context.Context, userID string, urls []models.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockShortenerSetMockRecorder) AddBatch(ctx, userID, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockShortenerSet)(nil).AddBatch), ctx, userID, urls)
}

// MockShortenerGet is a mock of ShortenerGet interface.
type MockShortenerGet struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerGetMockRecorder
}

// MockShortenerGetMockRecorder is the mock recorder for MockShortenerGet.
type MockShortenerGetMockRecorder struct {
	mock *MockShortenerGet
}

// NewMockShortenerGet creates a new mock instance.
func NewMockShortenerGet(ctrl *gomock.Controller) *MockShortenerGet {
	mock := &MockShortenerGet{ctrl: ctrl}
	mock.recorder = &MockShortenerGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerGet) EXPECT() *MockShortenerGetMockRecorder {
	return m.recorder
}

// GetByOriginalURL mocks base method.
func (m *MockShortenerGet) GetByOriginalURL(ctx context.Context, originalURL string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockShortenerGetMockRecorder) GetByOriginalURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockShortenerGet)(nil).GetByOriginalURL), ctx, originalURL)
}

// GetByShortID mocks base method.
func (m *MockShortenerGet) GetByShortID(ctx context.Context, shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortID", ctx, shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByShortID indicates an expected call of GetByShortID.
func (mr *MockShortenerGetMockRecorder) GetByShortID(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortID", reflect.TypeOf((*MockShortenerGet)(nil).GetByShortID), ctx, shortID)
}

// MockPingDB is a mock of PingDB interface.
type MockPingDB struct {
	ctrl     *gomock.Controller
	recorder *MockPingDBMockRecorder
}

// MockPingDBMockRecorder is the mock recorder for MockPingDB.
type MockPingDBMockRecorder struct {
	mock *MockPingDB
}

// NewMockPingDB creates a new mock instance.
func NewMockPingDB(ctrl *gomock.Controller) *MockPingDB {
	mock := &MockPingDB{ctrl: ctrl}
	mock.recorder = &MockPingDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingDB) EXPECT() *MockPingDBMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingDB) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingDBMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingDB)(nil).Ping), ctx)
}

// MockGetUserURLs is a mock of GetUserURLs interface.
type MockGetUserURLs struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserURLsMockRecorder
}

// MockGetUserURLsMockRecorder is the mock recorder for MockGetUserURLs.
type MockGetUserURLsMockRecorder struct {
	mock *MockGetUserURLs
}

// NewMockGetUserURLs creates a new mock instance.
func NewMockGetUserURLs(ctrl *gomock.Controller) *MockGetUserURLs {
	mock := &MockGetUserURLs{ctrl: ctrl}
	mock.recorder = &MockGetUserURLsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserURLs) EXPECT() *MockGetUserURLsMockRecorder {
	return m.recorder
}

// GetUserURLs mocks base method.
func (m *MockGetUserURLs) GetUserURLs(ctx context.Context, userID string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockGetUserURLsMockRecorder) GetUserURLs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockGetUserURLs)(nil).GetUserURLs), ctx, userID)
}

// MockURLDeleter is a mock of URLDeleter interface.
type MockURLDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockURLDeleterMockRecorder
}

// MockURLDeleterMockRecorder is the mock recorder for MockURLDeleter.
type MockURLDeleterMockRecorder struct {
	mock *MockURLDeleter
}

// NewMockURLDeleter creates a new mock instance.
func NewMockURLDeleter(ctrl *gomock.Controller) *MockURLDeleter {
	mock := &MockURLDeleter{ctrl: ctrl}
	mock.recorder = &MockURLDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLDeleter) EXPECT() *MockURLDeleterMockRecorder {
	return m.recorder
}

// IsURLDeleted mocks base method.
func (m *MockURLDeleter) IsURLDeleted(ctx context.Context, shortID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsURLDeleted", ctx, shortID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsURLDeleted indicates an expected call of IsURLDeleted.
func (mr *MockURLDeleterMockRecorder) IsURLDeleted(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsURLDeleted", reflect.TypeOf((*MockURLDeleter)(nil).IsURLDeleted), ctx, shortID)
}

// MarkDeletedBatch mocks base method.
func (m *MockURLDeleter) MarkDeletedBatch(ctx context.Context, userID string, shortIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedBatch", ctx, userID, shortIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedBatch indicates an expected call of MarkDeletedBatch.
func (mr *MockURLDeleterMockRecorder) MarkDeletedBatch(ctx, userID, shortIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedBatch", reflect.TypeOf((*MockURLDeleter)(nil).MarkDeletedBatch), ctx, userID, shortIDs)
}
