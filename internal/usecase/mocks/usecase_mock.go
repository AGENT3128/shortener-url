// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./mocks/usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/AGENT3128/shortener-url/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
	isgomock struct{}
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockURLRepository) Add(ctx context.Context, userID, shortURL, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, shortURL, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockURLRepositoryMockRecorder) Add(ctx, userID, shortURL, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLRepository)(nil).Add), ctx, userID, shortURL, originalURL)
}

// AddBatch mocks base method.
func (m *MockURLRepository) AddBatch(ctx context.Context, userID string, urls []entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockURLRepositoryMockRecorder) AddBatch(ctx, userID, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockURLRepository)(nil).AddBatch), ctx, userID, urls)
}

// Close mocks base method.
func (m *MockURLRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLRepository)(nil).Close))
}

// GetByOriginalURL mocks base method.
func (m *MockURLRepository) GetByOriginalURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockURLRepositoryMockRecorder) GetByOriginalURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockURLRepository)(nil).GetByOriginalURL), ctx, originalURL)
}

// GetByShortURL mocks base method.
func (m *MockURLRepository) GetByShortURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLRepositoryMockRecorder) GetByShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLRepository)(nil).GetByShortURL), ctx, shortURL)
}

// GetStats mocks base method.
func (m *MockURLRepository) GetStats(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockURLRepositoryMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockURLRepository)(nil).GetStats), ctx)
}

// GetUserURLs mocks base method.
func (m *MockURLRepository) GetUserURLs(ctx context.Context, userID string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockURLRepositoryMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockURLRepository)(nil).GetUserURLs), ctx, userID)
}

// MarkDeletedBatch mocks base method.
func (m *MockURLRepository) MarkDeletedBatch(ctx context.Context, userID string, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedBatch", ctx, userID, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedBatch indicates an expected call of MarkDeletedBatch.
func (mr *MockURLRepositoryMockRecorder) MarkDeletedBatch(ctx, userID, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedBatch", reflect.TypeOf((*MockURLRepository)(nil).MarkDeletedBatch), ctx, userID, shortURLs)
}

// Ping mocks base method.
func (m *MockURLRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepository)(nil).Ping), ctx)
}

// MockStatsGetter is a mock of StatsGetter interface.
type MockStatsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsGetterMockRecorder
	isgomock struct{}
}

// MockStatsGetterMockRecorder is the mock recorder for MockStatsGetter.
type MockStatsGetterMockRecorder struct {
	mock *MockStatsGetter
}

// NewMockStatsGetter creates a new mock instance.
func NewMockStatsGetter(ctrl *gomock.Controller) *MockStatsGetter {
	mock := &MockStatsGetter{ctrl: ctrl}
	mock.recorder = &MockStatsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsGetter) EXPECT() *MockStatsGetterMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockStatsGetter) GetStats(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatsGetterMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsGetter)(nil).GetStats), ctx)
}

// MockURLSaver is a mock of URLSaver interface.
type MockURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockURLSaverMockRecorder
	isgomock struct{}
}

// MockURLSaverMockRecorder is the mock recorder for MockURLSaver.
type MockURLSaverMockRecorder struct {
	mock *MockURLSaver
}

// NewMockURLSaver creates a new mock instance.
func NewMockURLSaver(ctrl *gomock.Controller) *MockURLSaver {
	mock := &MockURLSaver{ctrl: ctrl}
	mock.recorder = &MockURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLSaver) EXPECT() *MockURLSaverMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockURLSaver) Add(ctx context.Context, userID, shortURL, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, shortURL, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockURLSaverMockRecorder) Add(ctx, userID, shortURL, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLSaver)(nil).Add), ctx, userID, shortURL, originalURL)
}

// MockURLGetter is a mock of URLGetter interface.
type MockURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockURLGetterMockRecorder
	isgomock struct{}
}

// MockURLGetterMockRecorder is the mock recorder for MockURLGetter.
type MockURLGetterMockRecorder struct {
	mock *MockURLGetter
}

// NewMockURLGetter creates a new mock instance.
func NewMockURLGetter(ctrl *gomock.Controller) *MockURLGetter {
	mock := &MockURLGetter{ctrl: ctrl}
	mock.recorder = &MockURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLGetter) EXPECT() *MockURLGetterMockRecorder {
	return m.recorder
}

// GetByOriginalURL mocks base method.
func (m *MockURLGetter) GetByOriginalURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockURLGetterMockRecorder) GetByOriginalURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockURLGetter)(nil).GetByOriginalURL), ctx, originalURL)
}

// GetByShortURL mocks base method.
func (m *MockURLGetter) GetByShortURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLGetterMockRecorder) GetByShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLGetter)(nil).GetByShortURL), ctx, shortURL)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
	isgomock struct{}
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), ctx)
}

// MockBatchURLSaver is a mock of BatchURLSaver interface.
type MockBatchURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockBatchURLSaverMockRecorder
	isgomock struct{}
}

// MockBatchURLSaverMockRecorder is the mock recorder for MockBatchURLSaver.
type MockBatchURLSaverMockRecorder struct {
	mock *MockBatchURLSaver
}

// NewMockBatchURLSaver creates a new mock instance.
func NewMockBatchURLSaver(ctrl *gomock.Controller) *MockBatchURLSaver {
	mock := &MockBatchURLSaver{ctrl: ctrl}
	mock.recorder = &MockBatchURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchURLSaver) EXPECT() *MockBatchURLSaverMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockBatchURLSaver) AddBatch(ctx context.Context, userID string, urls []entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockBatchURLSaverMockRecorder) AddBatch(ctx, userID, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockBatchURLSaver)(nil).AddBatch), ctx, userID, urls)
}

// MockUserURLGetter is a mock of UserURLGetter interface.
type MockUserURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserURLGetterMockRecorder
	isgomock struct{}
}

// MockUserURLGetterMockRecorder is the mock recorder for MockUserURLGetter.
type MockUserURLGetterMockRecorder struct {
	mock *MockUserURLGetter
}

// NewMockUserURLGetter creates a new mock instance.
func NewMockUserURLGetter(ctrl *gomock.Controller) *MockUserURLGetter {
	mock := &MockUserURLGetter{ctrl: ctrl}
	mock.recorder = &MockUserURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserURLGetter) EXPECT() *MockUserURLGetterMockRecorder {
	return m.recorder
}

// GetUserURLs mocks base method.
func (m *MockUserURLGetter) GetUserURLs(ctx context.Context, userID string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockUserURLGetterMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockUserURLGetter)(nil).GetUserURLs), ctx, userID)
}

// MockURLDeleter is a mock of URLDeleter interface.
type MockURLDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockURLDeleterMockRecorder
	isgomock struct{}
}

// MockURLDeleterMockRecorder is the mock recorder for MockURLDeleter.
type MockURLDeleterMockRecorder struct {
	mock *MockURLDeleter
}

// NewMockURLDeleter creates a new mock instance.
func NewMockURLDeleter(ctrl *gomock.Controller) *MockURLDeleter {
	mock := &MockURLDeleter{ctrl: ctrl}
	mock.recorder = &MockURLDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLDeleter) EXPECT() *MockURLDeleterMockRecorder {
	return m.recorder
}

// MarkDeletedBatch mocks base method.
func (m *MockURLDeleter) MarkDeletedBatch(ctx context.Context, userID string, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedBatch", ctx, userID, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedBatch indicates an expected call of MarkDeletedBatch.
func (mr *MockURLDeleterMockRecorder) MarkDeletedBatch(ctx, userID, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedBatch", reflect.TypeOf((*MockURLDeleter)(nil).MarkDeletedBatch), ctx, userID, shortURLs)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
	isgomock struct{}
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}
